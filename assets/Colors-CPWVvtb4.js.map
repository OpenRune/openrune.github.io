{"version":3,"file":"Colors-CPWVvtb4.js","sources":["../../src/components/ColorPicker.js","../../src/views/Colors.js"],"sourcesContent":["import React, { useState, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { CCard, CCardBody } from '@coreui/react';\nimport {\n  convertHSLToHex as convertJagexHSLToHex,\n  packJagexHSL as packHSL,\n  unpackJagexHSL as unpackHSL\n} from 'src/api/ColorUtils';\n\n\nconst ColorPicker = forwardRef(({ width = 300, defaultColor = 32191, onChange }, ref) => {\n  const initialHSL = unpackHSL(defaultColor);\n\n  const [hue, setHue] = useState(initialHSL.hue);\n  const [saturation, setSaturation] = useState(initialHSL.saturation);\n  const [lightness, setLightness] = useState(initialHSL.lightness);\n  const [selectedColor, setSelectedColor] = useState(convertJagexHSLToHex(initialHSL.hue, initialHSL.saturation, initialHSL.lightness));\n  const [selectedColorString, setSelectedColorString] = useState(defaultColor);\n\n  const handleHSLInputChange = (newHSLValue) => {\n    const unpackedHSL = unpackHSL(newHSLValue);\n\n    setHue(unpackedHSL.hue);\n    setSaturation(unpackedHSL.saturation);\n    setLightness(unpackedHSL.lightness);\n\n    setSelectedColorString(newHSLValue);\n\n    const hexColor = convertJagexHSLToHex(unpackedHSL.hue, unpackedHSL.saturation, unpackedHSL.lightness);\n    setSelectedColor(hexColor);\n  };\n\n  useEffect(() => {\n    // Calculate the current hex color and packed HSL value\n    const hexColor = convertJagexHSLToHex(hue, saturation, lightness);\n    const packedHSLJagex = packHSL(hue, saturation, lightness);\n\n    setSelectedColor(hexColor);\n    setSelectedColorString(packedHSLJagex);\n\n    if (onChange) {\n      onChange(packedHSLJagex);\n    }\n  }, [hue, saturation, lightness, onChange]);\n\n  useImperativeHandle(ref, () => ({\n    getPackedColor: () => selectedColorString,\n    handleHSLInputChange: (newHSL) => {\n      handleHSLInputChange(newHSL);\n    }\n  }));\n\n  return (\n    <CCard style={{ maxWidth: width }}>\n      <CCardBody>\n        <div className=\"flex flex-col items-center gap-4\">\n          <div\n            style={{\n              backgroundColor: selectedColor,\n              height: '100px',\n              width: '100%',\n              borderRadius: '8px',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center'\n            }}\n          >\n            <p\n              style={{\n                color: lightness > 35 ? '#282c34' : '#ffffff',\n                fontSize: '1.2rem',\n                fontWeight: 'bold'\n              }}\n            >\n              {selectedColorString}\n            </p>\n          </div>\n\n          {/* Unified Slider Section */}\n          <div className=\"w-full\">\n            <label className=\"block text-sm font-medium mt-4 mb-1\">Hue</label>\n            <ColorSlider\n              width={width - 40}\n              max={63}\n              value={hue}\n              onChange={setHue}\n              gradientStops={Array.from({ length: 64 }, (_, i) => `hsl(${i * (360 / 63)}, 100%, 50%)`)}\n            />\n\n            <label className=\"block text-sm font-medium mt-4 mb-1\">Saturation</label>\n            <ColorSlider\n              width={width - 40}\n              max={7}\n              value={saturation}\n              onChange={setSaturation}\n              gradientStops={Array.from({ length: 8 }, (_, i) => `hsl(${hue * (360 / 63)}, ${i * (100 / 7)}%, 50%)`)}\n            />\n\n            <label className=\"block text-sm font-medium mt-4 mb-1\">Lightness</label>\n            <ColorSlider\n              width={width - 40}\n              max={127}\n              value={lightness}\n              onChange={setLightness}\n              gradientStops={Array.from({ length: 128 }, (_, i) => `hsl(${hue * (360 / 63)}, 50%, ${i * (100 / 127)}%)`)}\n            />\n          </div>\n        </div>\n      </CCardBody>\n    </CCard>\n  );\n});\n\n// Unified ColorSlider component\nconst ColorSlider = ({ width, max, value, onChange, gradientStops }) => {\n  const gradientStyle = {\n    backgroundImage: `linear-gradient(to right, ${gradientStops.join(', ')})`\n  };\n\n  return (\n    <input\n      type=\"range\"\n      min=\"0\"\n      max={max}\n      value={value}\n      onChange={(e) => onChange(Number(e.target.value))}\n      style={{ width: `${width}px`, ...gradientStyle }}\n      className=\"range-slider\"\n    />\n  );\n};\n\nexport default ColorPicker;\n\n// Inline CSS for range sliders\nconst style = document.createElement('style');\nstyle.innerHTML = `\n  .range-slider {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 100%;\n    height: 18px;\n    background-size: 100% 100%;\n    background-repeat: no-repeat;\n    border-radius: 8px;\n  }\n\n  .range-slider::-webkit-slider-runnable-track {\n    background-size: 100%;\n    height: 100%;\n    border-radius: 8px;\n    border: none;\n  }\n\n  .range-slider::-moz-range-track {\n    background-size: 100%;\n    height: 100%;\n    border-radius: 8px;\n    border: none;\n  }\n\n  .range-slider::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 18px;\n    height: 18px;\n    border-radius: 50%;\n    background-color: white;\n    border: 2px solid #ccc;\n  }\n\n  .range-slider::-moz-range-thumb {\n    width: 18px;\n    height: 18px;\n    border-radius: 50%;\n    background-color: white;\n    border: 2px solid #ccc;\n  }\n`;\ndocument.head.appendChild(style);\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  CRow,\n  CCol,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CFormInput,\n  CFormLabel,\n} from '@coreui/react';\nimport JagexColorPicker from 'src/components/ColorPicker';\nimport {\n  convertHexToJagexHSL,\n  convertJagexHSLToHex, convertJagexHSLToHSL, convertJagexHSLToRGB, getJagexHSLComponents,\n} from 'src/api/ColorUtils';\n\nconst Colors = () => {\n  const [hslValue, setJgexHslValue] = useState(0);\n  const [rgbValue, setHexValue] = useState('#ffffff');\n  const colorPickerRef = useRef(null);\n\n  const handleColorChange = (value, source = 'hsl') => {\n    if (source === 'hsl') {\n      setJgexHslValue(value);\n      const hexColor = convertJagexHSLToHex(value);\n      setHexValue(hexColor);\n    } else if (source === 'hex') {\n      setHexValue(value);\n      const packedHsl = convertHexToJagexHSL(value);\n      setJgexHslValue(packedHsl);\n    }\n\n\n    if (colorPickerRef.current) {\n      colorPickerRef.current.handleHSLInputChange(source === 'hsl' ? value : convertHexToJagexHSL(value));\n    }\n  };\n\n  useEffect(() => {\n    if (colorPickerRef.current) {\n      const color = colorPickerRef.current.getPackedColor() || 0;\n      handleColorChange(color, 'hsl');\n    }\n  }, [colorPickerRef]);\n\n  return (\n    <CRow className=\"colors-container\">\n      <CCol md={3}>\n        <CCard className=\"vertical-card mb-4\">\n          <CCardHeader>Color Settings</CCardHeader>\n          <CCardBody>\n            <CFormLabel htmlFor=\"jagexHSL\">Jagex HSL</CFormLabel>\n            <CFormInput\n              type=\"number\"\n              id=\"jagexHSL\"\n              value={hslValue}\n              onChange={(e) => handleColorChange(e.target.value, 'hsl')}\n              placeholder=\"Enter Jagex HSL (0-65535)\"\n              min={0}\n              max={65535}\n              className=\"mb-3\"\n            />\n\n            <CFormLabel htmlFor=\"rgbPicker\">RGB Color Picker</CFormLabel>\n            <CFormInput\n              type=\"color\"\n              id=\"rgbPicker\"\n              value={rgbValue}\n              onChange={(e) => handleColorChange(e.target.value, 'hex')}\n            />\n            <div className=\"mt-3\">\n              {colorPickerRef.current && (\n                <>\n                  <p className=\"mb-2\">\n                    <strong>Normal Hex:</strong> {convertJagexHSLToHex(colorPickerRef.current.getPackedColor() || 0)}\n                  </p>\n                  <p className=\"mb-2\">\n                    <strong>Normal RGB:</strong>\n                    {colorPickerRef.current && (() => {\n                      const {r, g, b} = convertJagexHSLToRGB(colorPickerRef.current.getPackedColor() || 0);\n                      return ` rgb(${r}, ${g}, ${b})`;\n                    })()}\n                  </p>\n                  <p className=\"mb-2\">\n                    <strong>Normal HSL:</strong>\n                    {colorPickerRef.current && (() => {\n                      const {h, s, l} = convertJagexHSLToHSL(colorPickerRef.current.getPackedColor() || 0);\n                      return ` hsl(${h}, ${s}%, ${l}%)`;\n                    })()}\n                  </p>\n                  <p className=\"mb-2\">\n                    <strong>Jagex HSL:</strong> {colorPickerRef.current.getPackedColor() || 0}\n                  </p>\n                  <p className=\"mb-2\">\n                    <strong>Jagex HSL (h,s,l):</strong>\n                    {colorPickerRef.current && (() => {\n                      const {h, s, l} = getJagexHSLComponents(colorPickerRef.current.getPackedColor() || 0);\n                      return ` hsl(${h}, ${s}%, ${l}%)`;\n                    })()}\n                  </p>\n                </>\n              )}\n            </div>\n          </CCardBody>\n        </CCard>\n\n\n        <CCard className=\"vertical-card mb-4\">\n          <CCardHeader className=\"bg-primary text-white d-flex align-items-center justify-content-between\">\n            <h6 className=\"mb-0 fw-normal\">Color Details</h6>\n            <span className=\"badge bg-light text-primary\">Info</span>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-muted mb-3\">\n              Jagex uses a 16-bit HSL color format within their engine, limiting them to 65,535 distinct colors.\n            </p>\n            <p className=\"text-muted mb-3\">\n              RGB color pickers allow for 16.7 million colors. The color you select may not exist within the 16-bit palette and will need to be approximated, which can lead to slightly different results.\n            </p>\n            <p className=\"text-muted mb-0\">\n              This tool generates a color palette using Jagex's 16-bit HSL format: 6 bits for hue, 3 bits for saturation, and 7 bits for lightness, all combined and represented as a short.\n            </p>\n          </CCardBody>\n        </CCard>\n      </CCol>\n\n      <CCol md={9}>\n        <CRow>\n          <CCol>\n            <CCard className=\"color-picker-card\">\n              <CCardHeader>Color Picker</CCardHeader>\n              <CCardBody className=\"d-flex justify-content-center align-items-center\">\n                <JagexColorPicker ref={colorPickerRef} width={500} onChange={(packedHSLJagex) => {\n                  handleColorChange(packedHSLJagex);\n                }} />\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default Colors;\n"],"names":["ColorPicker","forwardRef","width","defaultColor","onChange","ref","initialHSL","unpackHSL","hue","setHue","useState","saturation","setSaturation","lightness","setLightness","selectedColor","setSelectedColor","convertJagexHSLToHex","selectedColorString","setSelectedColorString","handleHSLInputChange","newHSLValue","unpackedHSL","hexColor","useEffect","packedHSLJagex","packHSL","useImperativeHandle","newHSL","jsx","CCard","CCardBody","jsxs","ColorSlider","_","i","max","value","gradientStops","gradientStyle","e","style","Colors","hslValue","setJgexHslValue","rgbValue","setHexValue","colorPickerRef","useRef","handleColorChange","source","packedHsl","convertHexToJagexHSL","color","CRow","CCol","CCardHeader","CFormLabel","CFormInput","Fragment","g","b","convertJagexHSLToRGB","h","s","l","convertJagexHSLToHSL","getJagexHSLComponents","JagexColorPicker"],"mappings":"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"}