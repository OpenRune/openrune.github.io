{"version":3,"file":"ColorUtils-Dcf7vEzi.js","sources":["../../src/api/ColorUtils.js"],"sourcesContent":["// Pack HSL values into the custom Jagex 16-bit HSL format\nexport const packJagexHSL = (hue, saturation, lightness) => {\n  // 6 bits for hue, 3 bits for saturation, 7 bits for lightness\n  return (hue << (3 + 7)) | (saturation << 7) | lightness;\n};\n\n// Unpack the 16-bit Jagex HSL value into its components\nexport const unpackJagexHSL = (packedValue) => {\n  const lightness = packedValue & 0b1111111; // 7 bits for lightness\n  const saturation = (packedValue >> 7) & 0b111; // 3 bits for saturation\n  const hue = (packedValue >> (7 + 3)) & 0b111111; // 6 bits for hue\n  return { hue, saturation, lightness };\n};\n\n\n// Convert RGB to HSL (standard HSL format)\nexport const rgbToHsl = (r, g, b) => {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h, s, l = (max + min) / 2;\n\n  if (max === min) {\n    h = s = 0; // achromatic\n  } else {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n      case g: h = (b - r) / d + 2; break;\n      case b: h = (r - g) / d + 4; break;\n      default: h = 0;\n    }\n    h /= 6;\n  }\n\n  h = Math.round(h * 360);\n  s = Math.round(s * 100);\n  l = Math.round(l * 100);\n\n  return { hue: h, saturation: s, lightness: l };\n};\n\nexport const convertHexToJagexHSL = (hex) => {\n  const r = parseInt(hex.slice(1, 3), 16);\n  const g = parseInt(hex.slice(3, 5), 16);\n  const b = parseInt(hex.slice(5, 7), 16);\n\n  return convertRgbToJagexHSL(r, g, b);\n};\n\nexport const convertRgbToJagexHSL = (r, g, b) => {\n  const { hue, saturation, lightness } = rgbToHsl(r, g, b);\n\n  // Convert HSL to the Jagex packed format\n  const packedHue = Math.round((hue / 360) * 63); // Scale hue to 0-63\n  const packedSaturation = Math.round((saturation / 100) * 7); // Scale saturation to 0-7\n  const packedLightness = Math.round((lightness / 100) * 127); // Scale lightness to 0-127\n\n  return packJagexHSL(packedHue, packedSaturation, packedLightness);\n};\n\n// Convert Jagex HSL to Hexadecimal color\nexport const convertJagexHSLToHex = (packedHsl) => {\n  const { hue, saturation, lightness } = unpackJagexHSL(packedHsl);\n  return convertHSLToHex(hue, saturation, lightness);\n};\n\nexport const convertJagexHSLToHSL = (packedHsl) => {\n  const { hue, saturation, lightness } = unpackJagexHSL(packedHsl);\n\n  const normalizedHue = Math.round((hue / 63) * 360);\n  const normalizedSaturation = Math.round((saturation / 7) * 100);\n  const normalizedLightness = Math.round((lightness / 127) * 100);\n\n  return { h: normalizedHue, s: normalizedSaturation, l: normalizedLightness }; // Return HSL values\n};\n\nexport const getJagexHSLComponents = (packedHsl) => {\n  const { hue, saturation, lightness } = unpackJagexHSL(packedHsl);\n\n  return { hue, saturation, lightness }; // Return the raw HSL values\n};\n\n\nexport const convertJagexHSLToRGB = (packedHsl) => {\n  const hexColor = convertJagexHSLToHex(packedHsl);\n  return convertHexToRGB(hexColor); // Convert the hex color to RGB\n};\n\nexport const convertHexToRGB = (hex) => {\n  // Remove the hash symbol if it's present\n  const cleanedHex = hex.replace(/^#/, '');\n\n  // Parse the R, G, B values from the hex string\n  const r = parseInt(cleanedHex.slice(0, 2), 16);\n  const g = parseInt(cleanedHex.slice(2, 4), 16);\n  const b = parseInt(cleanedHex.slice(4, 6), 16);\n\n  return { r, g, b }; // Return the RGB values as an object\n};\n\n// Helper function: Convert HSL (0-360, 0-100%, 0-100%) to Hexadecimal color\nexport const convertHSLToHex = (h, s, l) => {\n  let hue = (h / 63) * 360; // Convert 6-bit hue to 0-360 degrees\n  const saturation = (s / 7) * 100; // Convert 3-bit saturation to 0-100%\n  const lightness = (l / 127) * 100; // Convert 7-bit lightness to 0-100%\n\n  const chroma = (1 - Math.abs(2 * (lightness / 100) - 1)) * (saturation / 100);\n  const x = chroma * (1 - Math.abs((hue / 60) % 2 - 1));\n  const m = lightness / 100 - chroma / 2;\n\n  let r = 0, g = 0, b = 0;\n\n  if (0 <= hue && hue < 60) {\n    r = chroma; g = x; b = 0;\n  } else if (60 <= hue && hue < 120) {\n    r = x; g = chroma; b = 0;\n  } else if (120 <= hue && hue < 180) {\n    r = 0; g = chroma; b = x;\n  } else if (180 <= hue && hue < 240) {\n    r = 0; g = x; b = chroma;\n  } else if (240 <= hue && hue < 300) {\n    r = x; g = 0; b = chroma;\n  } else if (300 <= hue && hue < 360) {\n    r = chroma; g = 0; b = x;\n  }\n\n  r = Math.round((r + m) * 255);\n  g = Math.round((g + m) * 255);\n  b = Math.round((b + m) * 255);\n\n  const toHex = (c) => {\n    const hex = c.toString(16);\n    return hex.length === 1 ? '0' + hex : hex;\n  };\n\n  return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n};\n"],"names":["packJagexHSL","hue","saturation","lightness","unpackJagexHSL","packedValue","rgbToHsl","r","g","b","max","min","h","s","l","d","convertHexToJagexHSL","hex","convertRgbToJagexHSL","packedHue","packedSaturation","packedLightness","convertJagexHSLToHex","packedHsl","convertHSLToHex","convertJagexHSLToHSL","normalizedHue","normalizedSaturation","normalizedLightness","getJagexHSLComponents","convertJagexHSLToRGB","hexColor","convertHexToRGB","cleanedHex","chroma","x","m","toHex","c"],"mappings":"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"}