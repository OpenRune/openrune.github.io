{"version":3,"file":"Textures-CBInv7Mj.js","sources":["../../src/views/Textures.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  CButton,\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody,\n  CModalFooter,\n  CFormInput,\n  CFormSelect,\n  CSpinner,\n  CCard,\n  CCardHeader,\n  CCardBody,\n} from \"@coreui/react-pro\";\nimport { FaChevronUp, FaChevronDown, FaHashtag, FaFilter } from \"react-icons/fa\"; // Added FaFilter icon\nimport RSSprite from \"src/components/RSSprite\";\nimport ColorBox from \"src/api/ColorBox\";\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\nimport FilterTable from \"src/components/FilterTable\";\n\nconst Textures = () => {\n  const perPage = 30;\n  const [itemsPerPage, setItemsPerPage] = useState(perPage);\n  const [tableData, setTableData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [visible, setVisible] = useState(false);\n  const [selectedData, setSelectedData] = useState(null);\n  const [searchId, setSearchId] = useState('');\n  const [isTransparentFilter, setIsTransparentFilter] = useState('all');\n  const [filtersVisible, setFiltersVisible] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8080/public/texture/');\n        if (!response.ok) throw new Error('Network response was not ok');\n\n        const data = await response.json();\n        const formattedData = data.map((item) => ({\n          id: item.id,\n          isTransparent: item.isTransparent,\n          averageRgb: item.averageRgb,\n          animationDirection: item.animationDirection,\n          animationSpeed: item.animationSpeed,\n          spriteIds: item.fileIds,\n        }));\n\n        setTableData(formattedData.sort((a, b) => a.id - b.id));\n        setFilteredData(formattedData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleRowClick = (item) => {\n    setSelectedData(item);\n    setVisible(true);\n  };\n\n  const handleSearchIdChange = (e) => {\n    const value = e.target.value;\n    setSearchId(value);\n\n    const filtered = tableData.filter((item) =>\n      item.id.toString().includes(value)\n    );\n\n    setFilteredData(filtered);\n  };\n\n  const handleTransparencyFilterChange = (e) => {\n    const value = e.target.value;\n    setIsTransparentFilter(value);\n\n    const filtered = tableData.filter((item) => {\n      if (value === 'all') return true;\n      return value === 'true' ? item.isTransparent : !item.isTransparent;\n    });\n\n    setFilteredData(filtered);\n  };\n\n  const handleDownloadTexture = async (item) => {\n    if (!item || item.spriteIds.length === 0) return;\n\n    if (item.spriteIds.length === 1) {\n      // If only one sprite, download directly\n      const response = await fetch(`http://127.0.0.1:8080/public/sprite/${item.spriteIds[0]}.png`);\n      const blob = await response.blob();\n      saveAs(blob, `${item.spriteIds[0]}.png`);\n    } else {\n      // If multiple sprites, create a zip\n      const zip = new JSZip();\n      await Promise.all(item.spriteIds.map(async (spriteId) => {\n        const response = await fetch(`http://127.0.0.1:8080/public/sprite/${spriteId}.png`);\n        const blob = await response.blob();\n        zip.file(`${spriteId}.png`, blob);\n      }));\n\n      zip.generateAsync({ type: 'blob' }).then((content) => {\n        saveAs(content, `textures_${item.id}.zip`);\n      });\n    }\n  };\n\n  const handleDownloadAll = async () => {\n    const zip = new JSZip();\n    await Promise.all(tableData.map(async (item) => {\n      if (item.spriteIds.length === 1) {\n        // If only one sprite, add to zip\n        const response = await fetch(`http://127.0.0.1:8080/public/sprite/${item.spriteIds[0]}.png`);\n        const blob = await response.blob();\n        zip.file(`${item.spriteIds[0]}.png`, blob);\n      } else {\n        // If multiple sprites, add all to zip\n        await Promise.all(item.spriteIds.map(async (spriteId) => {\n          const response = await fetch(`http://127.0.0.1:8080/public/sprite/${spriteId}.png`);\n          const blob = await response.blob();\n          zip.file(`${spriteId}.png`, blob);\n        }));\n      }\n    }));\n\n    zip.generateAsync({ type: 'blob' }).then((content) => {\n      saveAs(content, 'all_textures.zip');\n    });\n  };\n\n  const columns = [\n    {\n      key: 'id',\n      label: 'ID',\n      _style: { width: '30%' },\n      filter: false,\n      sorter: false,\n    },\n    {\n      key: 'transparency',\n      label: 'Transparency',\n      filter: false,\n      sorter: false,\n    },\n    {\n      key: 'averageRgb',\n      label: 'Average RGB',\n      filter: false,\n      sorter: false,\n    },\n    {\n      key: 'animationDirection',\n      label: 'Direction',\n      filter: false,\n      sorter: false,\n    },\n    {\n      key: 'animationSpeed',\n      label: 'Speed',\n      filter: false,\n      sorter: false,\n    },\n    {\n      key: 'sprites',\n      label: 'Sprites',\n      filter: false,\n      sorter: false,\n    },\n  ];\n\n  const scopedColumns = {\n    transparency: (item) => (\n      <td>{item.isTransparent ? 'Yes' : 'No'}</td>\n    ),\n    averageRgb: (item) => (\n      <td>\n        <ColorBox width={80} height={80} packedHsl={item.averageRgb} tooltip showHex />\n      </td>\n    ),\n    sprites: (item) => (\n      <td style={{ display: 'flex', gap: '10px' }}>\n        {item.spriteIds.map((spriteId) => (\n          <RSSprite\n            key={spriteId}\n            rounded\n            thumbnail\n            id={spriteId}\n            width={80}\n            height={80}\n            keepAspectRatio\n            onClick={() => handleRowClick(item)}\n          />\n        ))}\n      </td>\n    ),\n  };\n\n  const customFilters = (\n    <div style={{ display: 'flex', gap: '20px', alignItems: 'center', marginBottom: '10px' }}>\n      {/* Search by ID */}\n      <div style={{ display: 'flex', alignItems: 'center' }}>\n        <FaHashtag style={{ marginRight: '8px' }} />\n        <CFormInput\n          type=\"text\"\n          placeholder=\"Search ID\"\n          value={searchId}\n          onChange={handleSearchIdChange}\n          style={{ width: '150px' }}\n        />\n      </div>\n\n      {/* Transparency Filter */}\n      <div style={{ display: 'flex', alignItems: 'center' }}>\n        <FaFilter style={{ marginRight: '8px' }} /> {/* Filter Icon */}\n        <CFormSelect\n          value={isTransparentFilter}\n          onChange={handleTransparencyFilterChange}\n          style={{ width: '150px' }}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"true\">Transparent</option>\n          <option value=\"false\">Opaque</option>\n        </CFormSelect>\n      </div>\n\n      {/* Download All Textures Button - Moved to Right */}\n      <CButton color=\"primary\" onClick={handleDownloadAll} style={{ marginLeft: 'auto' }}>\n        Download All Textures\n      </CButton>\n    </div>\n  );\n\n  return (\n    <>\n      <FilterTable\n        pageTitle=\"Textures\"\n        tableData={filteredData}\n        columns={columns}\n        scopedColumns={scopedColumns}\n        loading={loading}\n        customFilters={customFilters}\n        handleRowClick={handleRowClick}\n      />\n\n      {selectedData && (\n        <CModal alignment=\"center\" visible={visible} onClose={() => setVisible(false)}>\n          <CModalHeader>\n            <CModalTitle>Texture Details</CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <p><strong>ID:</strong> {selectedData.id}</p>\n            <p><strong>Transparent:</strong> {selectedData.isTransparent ? 'Yes' : 'No'}</p>\n            <div style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>\n              <strong style={{ marginRight: '10px' }}>Average RGB:</strong>\n              <ColorBox width={55} height={55} tooltip showHex packedHsl={selectedData.averageRgb} />\n            </div>\n            <p><strong>Animation Direction:</strong> {selectedData.animationDirection}</p>\n            <p><strong>Animation Speed:</strong> {selectedData.animationSpeed}</p>\n            <p><strong>Sprites:</strong></p>\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\n              {selectedData.spriteIds.map((spriteId) => (\n                <div key={spriteId} style={{ textAlign: 'center' }}>\n                  <RSSprite id={spriteId} width={80} height={80} keepAspectRatio />\n                  <p>{spriteId}</p>\n                </div>\n              ))}\n            </div>\n          </CModalBody>\n          <CModalFooter>\n            <CButton color=\"primary\" onClick={() => handleDownloadTexture(selectedData)}>\n              Download\n            </CButton>\n            <CButton color=\"secondary\" onClick={() => setVisible(false)}>\n              Close\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      )}\n    </>\n  );\n};\n\nexport default Textures;\n"],"names":["Textures","useState","tableData","setTableData","filteredData","setFilteredData","loading","setLoading","visible","setVisible","selectedData","setSelectedData","searchId","setSearchId","isTransparentFilter","setIsTransparentFilter","useEffect","response","formattedData","item","a","b","error","handleRowClick","handleSearchIdChange","e","value","filtered","handleTransparencyFilterChange","handleDownloadTexture","blob","saveAs","zip","JSZip","spriteId","content","handleDownloadAll","columns","scopedColumns","jsx","ColorBox","RSSprite","customFilters","jsxs","FaHashtag","CFormInput","FaFilter","CFormSelect","CButton","Fragment","FilterTable","CModal","CModalHeader","CModalTitle","CModalBody","CModalFooter"],"mappings":"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"}